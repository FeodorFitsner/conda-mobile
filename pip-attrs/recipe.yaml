context:
  name: attrs
  version: 17.4.0
  hash_type: sha256
  hash_value: 1c7960ccfd6a005cd9f7ba884e6316b5e430a3f1a6c37c5f87d8b43f83b54ec9

package:
  name: pip-{{ name|lower }}
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.tar.gz'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  noarch: true
  script:
    - export CC=/bin/false
    - export CXX=/bin/false
    - python setup.py install  --single-version-externally-managed --record=record.txt --no-compile --install-base=$PREFIX/android/arm --install-lib=$PREFIX/android/arm/python/site-packages --install-scripts=$PREFIX/android/arm/scripts --install-data=$PREFIX/android/arm/data --install-headers=$PREFIX/android/arm/include
    - python setup.py install  --single-version-externally-managed --record=record.txt --no-compile --install-base=$PREFIX/android/arm64 --install-lib=$PREFIX/android/arm64/python/site-packages --install-scripts=$PREFIX/android/arm64/scripts --install-data=$PREFIX/android/arm64/data --install-headers=$PREFIX/android/arm64/include
    - python setup.py install  --single-version-externally-managed --record=record.txt --no-compile --install-base=$PREFIX/android/x86 --install-lib=$PREFIX/android/x86/python/site-packages --install-scripts=$PREFIX/android/x86/scripts --install-data=$PREFIX/android/x86/data --install-headers=$PREFIX/android/x86/include
    - python setup.py install  --single-version-externally-managed --record=record.txt --no-compile --install-base=$PREFIX/android/x86_64 --install-lib=$PREFIX/android/x86_64/python/site-packages --install-scripts=$PREFIX/android/x86_64/scripts --install-data=$PREFIX/android/x86_64/data --install-headers=$PREFIX/android/x86_64/include
    - python setup.py install  --single-version-externally-managed --record=record.txt --no-compile --install-base=$PREFIX/iphoneos --install-lib=$PREFIX/iphoneos/python/site-packages --install-scripts=$PREFIX/iphoneos/scripts --install-data=$PREFIX/iphoneos/data --install-headers=$PREFIX/iphoneos/include
    - python setup.py install  --single-version-externally-managed --record=record.txt --no-compile --install-base=$PREFIX/iphonesimulator --install-lib=$PREFIX/iphonesimulator/python/site-packages --install-scripts=$PREFIX/iphonesimulator/scripts --install-data=$PREFIX/iphonesimulator/data --install-headers=$PREFIX/iphonesimulator/include
requirements: {}
about:
  home: http://www.attrs.org/
  license: MIT License
  license_family: MIT
  license_file: ''
  summary: Classes Without Boilerplate. Built for iOS and Android apps using enaml-native.
  description: ".. image:: http://www.attrs.org/en/latest/_static/attrs_logo.png\n   :alt: attrs Logo\n\n======================================\n``attrs``: Classes Without Boilerplate\n======================================\n\n.. image:: https://readthedocs.org/projects/attrs/badge/?version=stable\n   :target: http://www.attrs.org/en/stable/?badge=stable\n   :alt: Documentation Status\n\n.. image:: https://travis-ci.org/python-attrs/attrs.svg?branch=master\n   :target: https://travis-ci.org/python-attrs/attrs\n   :alt: CI Status\n\n.. image:: https://codecov.io/github/python-attrs/attrs/branch/master/graph/badge.svg\n   :target: https://codecov.io/github/python-attrs/attrs\n   :alt: Test Coverage\n\n.. teaser-begin\n\n``attrs`` is the Python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka `dunder <https://nedbatchelder.com/blog/200605/dunder.html>`_ methods).\n\nIts main goal is to help you to write\
    \ **concise** and **correct** software without slowing down your code.\n\n.. -spiel-end-\n\nFor that, it gives you a class decorator and a way to declaratively define the attributes on that class:\n\n.. -code-begin-\n\n.. code-block:: pycon\n\n   >>> import attr\n\n   >>> @attr.s\n   ... class SomeClass(object):\n   ...     a_number = attr.ib(default=42)\n   ...     list_of_numbers = attr.ib(default=attr.Factory(list))\n   ...\n   ...     def hard_math(self, another_number):\n   ...         return self.a_number + sum(self.list_of_numbers) * another_number\n\n\n   >>> sc = SomeClass(1, [1, 2, 3])\n   >>> sc\n   SomeClass(a_number=1, list_of_numbers=[1, 2, 3])\n\n   >>> sc.hard_math(3)\n   19\n   >>> sc == SomeClass(1, [1, 2, 3])\n   True\n   >>> sc != SomeClass(2, [3, 2, 1])\n   True\n\n   >>> attr.asdict(sc)\n   {'a_number': 1, 'list_of_numbers': [1, 2, 3]}\n\n   >>> SomeClass()\n   SomeClass(a_number=42, list_of_numbers=[])\n\n   >>> C = attr.make_class(\"C\", [\"a\", \"b\"])\n   >>>\
    \ C(\"foo\", \"bar\")\n   C(a='foo', b='bar')\n\n\nAfter *declaring* your attributes ``attrs`` gives you:\n\n- a concise and explicit overview of the class's attributes,\n- a nice human-readable ``__repr__``,\n- a complete set of comparison methods,\n- an initializer,\n- and much more,\n\n*without* writing dull boilerplate code again and again and *without* runtime performance penalties.\n\nThis gives you the power to use actual classes with actual types in your code instead of confusing ``tuple``\\ s or `confusingly behaving <http://www.attrs.org/en/stable/why.html#namedtuples>`_ ``namedtuple``\\ s.\nWhich in turn encourages you to write *small classes* that do `one thing well <https://www.destroyallsoftware.com/talks/boundaries>`_.\nNever again violate the `single responsibility principle <https://en.wikipedia.org/wiki/Single_responsibility_principle>`_ just because implementing ``__init__`` et al is a painful drag.\n\n\n.. -testimonials-\n\nTestimonials\n============\n\n**Amber Hawkie\
    \ Brown**, Twisted Release Manager and Computer Owl:\n\n  Writing a fully-functional class using attrs takes me less time than writing this testimonial.\n\n\n**Glyph Lefkowitz**, creator of `Twisted <https://twistedmatrix.com/>`_, `Automat <https://pypi.python.org/pypi/Automat>`_, and other open source software, in `The One Python Library Everyone Needs <https://glyph.twistedmatrix.com/2016/08/attrs.html>`_:\n\n  I’m looking forward to is being able to program in Python-with-attrs everywhere.\n  It exerts a subtle, but positive, design influence in all the codebases I’ve see it used in.\n\n\n**Kenneth Reitz**, author of `requests <http://www.python-requests.org/>`_, Python Overlord at Heroku, `on paper no less <https://twitter.com/hynek/status/866817877650751488>`_:\n\n  attrs—classes for humans.  I like it.\n\n\n**Łukasz Langa**, prolific CPython core developer and Production Engineer at Facebook:\n\n  I'm increasingly digging your attr.ocity. Good job!\n\n\n.. -end-\n\n.. -project-information-\n\
    \nGetting Help\n============\n\nPlease use the ``python-attrs`` tag on `StackOverflow <https://stackoverflow.com/questions/tagged/python-attrs>`_ to get help.\n\nAnswering questions of your fellow developers is also great way to help the project!\n\n\nProject Information\n===================\n\n``attrs`` is released under the `MIT <https://choosealicense.com/licenses/mit/>`_ license,\nits documentation lives at `Read the Docs <http://www.attrs.org/>`_,\nthe code on `GitHub <https://github.com/python-attrs/attrs>`_,\nand the latest release on `PyPI <https://pypi.org/project/attrs/>`_.\nIt’s rigorously tested on Python 2.7, 3.4+, and PyPy.\n\nIf you'd like to contribute you're most welcome and we've written `a little guide <http://www.attrs.org/en/latest/contributing.html>`_ to get you started!\n\n\nRelease Information\n===================\n\n17.4.0 (2017-12-30)\n-------------------\n\nBackward-incompatible Changes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- The traversal of MROs when using multiple\
    \ inheritance was backward:\n  If you defined a class ``C`` that subclasses ``A`` and ``B`` like ``C(A, B)``, ``attrs`` would have collected the attributes from ``B`` *before* those of ``A``.\n\n  This is now fixed and means that in classes that employ multiple inheritance, the output of ``__repr__`` and the order of positional arguments in ``__init__`` changes.\n  Due to the nature of this bug, a proper deprecation cycle was unfortunately impossible.\n\n  Generally speaking, it's advisable to prefer ``kwargs``-based initialization anyways – *especially* if you employ multiple inheritance and diamond-shaped hierarchies.\n\n  `#298 <https://github.com/python-attrs/attrs/issues/298>`_,\n  `#299 <https://github.com/python-attrs/attrs/issues/299>`_,\n  `#304 <https://github.com/python-attrs/attrs/issues/304>`_\n- The ``__repr__`` set by ``attrs``\n  no longer produces an ``AttributeError``\n  when the instance is missing some of the specified attributes\n  (either through deleting\n  or\
    \ after using ``init=False`` on some attributes).\n\n  This can break code\n  that relied on ``repr(attr_cls_instance)`` raising ``AttributeError``\n  to check if any attr-specified members were unset.\n\n  If you were using this,\n  you can implement a custom method for checking this::\n\n      def has_unset_members(self):\n          for field in attr.fields(type(self)):\n              try:\n                  getattr(self, field.name)\n              except AttributeError:\n                  return True\n          return False\n\n  `#308 <https://github.com/python-attrs/attrs/issues/308>`_\n\n\nDeprecations\n^^^^^^^^^^^^\n\n- The ``attr.ib(convert=callable)`` option is now deprecated in favor of ``attr.ib(converter=callable)``.\n\n  This is done to achieve consistency with other noun-based arguments like *validator*.\n\n  *convert* will keep working until at least January 2019 while raising a ``DeprecationWarning``.\n\n  `#307 <https://github.com/python-attrs/attrs/issues/307>`_\n\n\n\
    Changes\n^^^^^^^\n\n- Generated ``__hash__`` methods now hash the class type along with the attribute values.\n  Until now the hashes of two classes with the same values were identical which was a bug.\n\n  The generated method is also *much* faster now.\n\n  `#261 <https://github.com/python-attrs/attrs/issues/261>`_,\n  `#295 <https://github.com/python-attrs/attrs/issues/295>`_,\n  `#296 <https://github.com/python-attrs/attrs/issues/296>`_\n- ``attr.ib``\\ ’s ``metadata`` argument now defaults to a unique empty ``dict`` instance instead of sharing a common empty ``dict`` for all.\n  The singleton empty ``dict`` is still enforced.\n\n  `#280 <https://github.com/python-attrs/attrs/issues/280>`_\n- ``ctypes`` is optional now however if it's missing, a bare ``super()`` will not work in slots classes.\n  This should only happen in special environments like Google App Engine.\n\n  `#284 <https://github.com/python-attrs/attrs/issues/284>`_,\n  `#286 <https://github.com/python-attrs/attrs/issues/286>`_\n\
    - The attribute redefinition feature introduced in 17.3.0 now takes into account if an attribute is redefined via multiple inheritance.\n  In that case, the definition that is closer to the base of the class hierarchy wins.\n\n  `#285 <https://github.com/python-attrs/attrs/issues/285>`_,\n  `#287 <https://github.com/python-attrs/attrs/issues/287>`_\n- Subclasses of ``auto_attribs=True`` can be empty now.\n\n  `#291 <https://github.com/python-attrs/attrs/issues/291>`_,\n  `#292 <https://github.com/python-attrs/attrs/issues/292>`_\n- Equality tests are *much* faster now.\n\n  `#306 <https://github.com/python-attrs/attrs/issues/306>`_\n- All generated methods now have correct ``__module__``, ``__name__``, and (on Python 3) ``__qualname__`` attributes.\n\n  `#309 <https://github.com/python-attrs/attrs/issues/309>`_\n\n`Full changelog <http://www.attrs.org/en/stable/changelog.html>`_.\n\nCredits\n=======\n\n``attrs`` is written and maintained by `Hynek Schlawack <https://hynek.me/>`_.\n\n\
    The development is kindly supported by `Variomedia AG <https://www.variomedia.de/>`_.\n\nA full list of contributors can be found in `GitHub's overview <https://github.com/python-attrs/attrs/graphs/contributors>`_.\n\nIt’s the spiritual successor of `characteristic <https://characteristic.readthedocs.io/>`_ and aspires to fix some of it clunkiness and unfortunate decisions.\nBoth were inspired by Twisted’s `FancyEqMixin <https://twistedmatrix.com/documents/current/api/twisted.python.util.FancyEqMixin.html>`_ but both are implemented using class decorators because `sub-classing is bad for you <https://www.youtube.com/watch?v=3MNVP9-hglc>`_, m’kay?\n\n\n"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''

