diff --git a/work/Modules/_localemodule.c b/patched/Modules/_localemodule.c
index 7e2f1a9..45d2413 100644
--- a/work/Modules/_localemodule.c
+++ b/patched/Modules/_localemodule.c
@@ -207,7 +207,7 @@ static PyObject*
 PyLocale_localeconv(PyObject* self)
 {
     PyObject* result;
-    struct lconv *l;
+    //struct lconv *l;
     PyObject *x;
 
     result = PyDict_New();
@@ -215,52 +215,52 @@ PyLocale_localeconv(PyObject* self)
         return NULL;
 
     /* if LC_NUMERIC is different in the C library, use saved value */
-    l = localeconv();
+    //l = localeconv();
 
     /* hopefully, the localeconv result survives the C library calls
        involved herein */
 
-#define RESULT_STRING(s)\
-    x = PyString_FromString(l->s);\
+#define RESULT_STRING(s,v)\
+    x = PyString_FromString(v);\
     if (!x) goto failed;\
     PyDict_SetItemString(result, #s, x);\
     Py_XDECREF(x)
 
-#define RESULT_INT(i)\
-    x = PyInt_FromLong(l->i);\
+#define RESULT_INT(i,v)\
+    x = PyInt_FromLong(v);\
     if (!x) goto failed;\
     PyDict_SetItemString(result, #i, x);\
     Py_XDECREF(x)
 
     /* Numeric information */
-    RESULT_STRING(decimal_point);
-    RESULT_STRING(thousands_sep);
-    x = copy_grouping(l->grouping);
+    RESULT_STRING(decimal_point,".");
+    RESULT_STRING(thousands_sep,",");
+    x = copy_grouping("\03\0");
     if (!x)
         goto failed;
     PyDict_SetItemString(result, "grouping", x);
     Py_XDECREF(x);
 
     /* Monetary information */
-    RESULT_STRING(int_curr_symbol);
-    RESULT_STRING(currency_symbol);
-    RESULT_STRING(mon_decimal_point);
-    RESULT_STRING(mon_thousands_sep);
-    x = copy_grouping(l->mon_grouping);
+    RESULT_STRING(int_curr_symbol,"$");
+    RESULT_STRING(currency_symbol,"$");
+    RESULT_STRING(mon_decimal_point,".");
+    RESULT_STRING(mon_thousands_sep,",");
+    x = copy_grouping("\03\0");
     if (!x)
         goto failed;
     PyDict_SetItemString(result, "mon_grouping", x);
     Py_XDECREF(x);
-    RESULT_STRING(positive_sign);
-    RESULT_STRING(negative_sign);
-    RESULT_INT(int_frac_digits);
-    RESULT_INT(frac_digits);
-    RESULT_INT(p_cs_precedes);
-    RESULT_INT(p_sep_by_space);
-    RESULT_INT(n_cs_precedes);
-    RESULT_INT(n_sep_by_space);
-    RESULT_INT(p_sign_posn);
-    RESULT_INT(n_sign_posn);
+    RESULT_STRING(positive_sign,"");
+    RESULT_STRING(negative_sign,"-");
+    RESULT_INT(int_frac_digits,2);
+    RESULT_INT(frac_digits,2);
+    RESULT_INT(p_cs_precedes,1);
+    RESULT_INT(p_sep_by_space,0);
+    RESULT_INT(n_cs_precedes,1);
+    RESULT_INT(n_sep_by_space,0);
+    RESULT_INT(p_sign_posn,1);
+    RESULT_INT(n_sign_posn,1);
     return result;
 
   failed:
diff --git a/work/Objects/stringlib/formatter.h b/patched/Objects/stringlib/formatter.h
index 70f574c..12ec38b 100644
--- a/work/Objects/stringlib/formatter.h
+++ b/patched/Objects/stringlib/formatter.h
@@ -639,13 +639,13 @@ static void
 get_locale_info(int type, LocaleInfo *locale_info)
 {
     switch (type) {
-    case LT_CURRENT_LOCALE: {
-        struct lconv *locale_data = localeconv();
-        locale_info->decimal_point = locale_data->decimal_point;
-        locale_info->thousands_sep = locale_data->thousands_sep;
-        locale_info->grouping = locale_data->grouping;
-        break;
-    }
+//     case LT_CURRENT_LOCALE: {
+//         struct lconv *locale_data = localeconv();
+//         locale_info->decimal_point = locale_data->decimal_point;
+//         locale_info->thousands_sep = locale_data->thousands_sep;
+//         locale_info->grouping = locale_data->grouping;
+//         break;
+//     }
     case LT_DEFAULT_LOCALE:
         locale_info->decimal_point = ".";
         locale_info->thousands_sep = ",";
diff --git a/work/Objects/stringlib/localeutil.h b/patched/Objects/stringlib/localeutil.h
index f548133..5c26612 100644
--- a/work/Objects/stringlib/localeutil.h
+++ b/patched/Objects/stringlib/localeutil.h
@@ -202,9 +202,9 @@ _Py_InsertThousandsGroupingLocale(STRINGLIB_CHAR *buffer,
                                   Py_ssize_t n_digits,
                                   Py_ssize_t min_width)
 {
-        struct lconv *locale_data = localeconv();
-        const char *grouping = locale_data->grouping;
-        const char *thousands_sep = locale_data->thousands_sep;
+        //struct lconv *locale_data = localeconv();
+        const char *grouping = "\3\0";//locale_data->grouping;
+        const char *thousands_sep = ",";//locale_data->thousands_sep;
 
         return _Py_InsertThousandsGrouping(buffer, n_buffer, digits, n_digits,
                                            min_width, grouping, thousands_sep);
diff --git a/work/Python/pystrtod.c b/patched/Python/pystrtod.c
index ae6ab9c..b6463ac 100644
--- a/work/Python/pystrtod.c
+++ b/patched/Python/pystrtod.c
@@ -126,7 +126,7 @@ _PyOS_ascii_strtod(const char *nptr, char **endptr)
 {
     char *fail_pos;
     double val = -1.0;
-    struct lconv *locale_data;
+    //struct lconv *locale_data;
     const char *decimal_point;
     size_t decimal_point_len;
     const char *p, *decimal_point_pos;
@@ -138,8 +138,8 @@ _PyOS_ascii_strtod(const char *nptr, char **endptr)
 
     fail_pos = NULL;
 
-    locale_data = localeconv();
-    decimal_point = locale_data->decimal_point;
+    //locale_data = localeconv();
+    decimal_point = ".";//locale_data->decimal_point;
     decimal_point_len = strlen(decimal_point);
 
     assert(decimal_point_len != 0);
@@ -375,8 +375,8 @@ PyOS_string_to_double(const char *s,
 Py_LOCAL_INLINE(void)
 change_decimal_from_locale_to_dot(char* buffer)
 {
-    struct lconv *locale_data = localeconv();
-    const char *decimal_point = locale_data->decimal_point;
+    ///struct lconv *locale_data = localeconv();
+    const char *decimal_point = ".";///locale_data->decimal_point;
 
     if (decimal_point[0] != '.' || decimal_point[1] != 0) {
         size_t decimal_point_len = strlen(decimal_point);
