language: generic
os:
  - linux
  - osx
osx_image: xcode9.2
install:
  - export ANDROID_HOME=$HOME/Android/Sdk/
  - export NDK=$HOME/Android/Sdk/ndk-bundle
  - export NDK_API=21
  - export capture="tail -n 200"

  # Install makeinfo via texinfo
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt update -qq && sudo apt -qq install texinfo openjdk-8-jdk; fi

  # Use java 8
  - java -version

  # Install rename via brew
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install rename; fi

  # Install miniconda
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
       wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
     else
       wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  # Install conda build and anaconda-client
  - conda install anaconda-client conda-build -q

  # Install NDK
  - mkdir -p $ANDROID_HOME
  - cd $ANDROID_HOME
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -O tools.zip;
     else
      wget https://dl.google.com/android/repository/sdk-tools-darwin-4333796.zip -O tools.zip;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      wget https://dl.google.com/android/repository/android-ndk-r20-linux-x86_64.zip -O ndk-bundle.zip;
    else
      wget https://dl.google.com/android/repository/android-ndk-r20-darwin-x86_64.zip -O ndk-bundle.zip;
    fi
  - unzip -oq tools.zip
  - unzip -oq ndk-bundle.zip
  - rm *.zip
  - find . | grep make_standalone_toolchain
  - mv android-ndk-r20 ndk-bundle

  # Install sdk and build tools
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then echo yes | tools/bin/sdkmanager --update > output.log; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then echo yes | tools/bin/sdkmanager "platforms;android-27" > output.log; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then echo yes | tools/bin/sdkmanager "build-tools;27.0.3" > output.log; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then echo yes | tools/bin/sdkmanager "extras;google;m2repository" > output.log; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then echo yes | tools/bin/sdkmanager "extras;android;m2repository" > output.log; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then echo yes | tools/bin/sdkmanager --licenses > output.log; fi
  - cd $TRAVIS_BUILD_DIR

  # Create toolchains
  - ARCH=arm
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then python $NDK/build/tools/make_standalone_toolchain.py --arch $ARCH --api $NDK_API --stl=libc++ --install-dir=$NDK/standalone/$ARCH; fi
  - ARCH=arm64
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then python $NDK/build/tools/make_standalone_toolchain.py --arch $ARCH --api $NDK_API --stl=libc++ --install-dir=$NDK/standalone/$ARCH; fi
  - ARCH=x86
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then python $NDK/build/tools/make_standalone_toolchain.py --arch $ARCH --api $NDK_API --stl=libc++ --install-dir=$NDK/standalone/$ARCH; fi
  - ARCH=x86_64
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then python $NDK/build/tools/make_standalone_toolchain.py --arch $ARCH --api $NDK_API --stl=libc++ --install-dir=$NDK/standalone/$ARCH; fi

script:
  # Build ios recipes
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then conda-build ios-libffi | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then conda-build ios-openssl | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then conda-build --py 2.7 ios-python | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then conda-build --py 2.7 ios-atom | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then conda-build --py 2.7 ios-enaml | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then conda-build --py 2.7 ios-msgpack | $capture; fi

  # Build android recipes
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build android-libffi | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build android-liblzma | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build android-libbz2 | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build android-openssl | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build android-sqlite | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build --py 2.7 android-python | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build --py 2.7 android-atom | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build --py 2.7 android-enaml | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build --py 2.7 android-msgpack | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build --py 3.7 android-python | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build --py 3.7 android-atom | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build --py 3.7 android-enaml | $capture; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build --py 3.7 android-msgpack | $capture; fi
  #- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build android-lz4 | $capture; fi
  #- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build android-libgeos | $capture; fi
  #- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build android-shapely | $capture; fi
  #- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda-build android-pyproj | $capture; fi

  # Pip (pure python) recipes
  - conda-build pip-ply | $capture
  #- conda-build pip-automat | $capture
  #- conda-build pip-futures | $capture
  #- conda-build pip-backports_abc | $capture
  #- conda-build pip-constantly | $capture
  #- conda-build pip-hyperlink | $capture
  #- conda-build pip-inda | $capture
  #- conda-build pip-incremental | $capture
  #- conda-build pip-singledispatch | $capture
  #- conda-build pip-six | $capture
  #- conda-build pip-zope.interface | $capture
  #- conda-build pip-twisted | $capture
  #- conda-build pip-tornado | $capture
